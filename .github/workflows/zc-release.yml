name: release zc folder encryption kit

on:
  workflow_dispatch:
    # This allows manual triggering of the workflow

permissions:
  contents: write  # Needed for creating releases

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Needed for the attestations step
      contents: write # Needed for creating releases
      attestations: write # Needed for creating attestations
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: get_version
        run: |
          cd go/encrypt
          VERSION=$(grep "const tool_version" main.go | cut -d'"' -f2)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version extracted: ${VERSION}"
          cd ../..

      - name: Check if release already exists
        id: check_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          TAG_VERSION="v${VERSION}"
          
          echo "Checking if tag $TAG_VERSION already exists..."
          
          # Use the GitHub CLI to check if the release exists
          if gh release view "$TAG_VERSION" &> /dev/null; then
            echo "Release $TAG_VERSION already exists. Exiting workflow successfully."
            echo "exists=true" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Release $TAG_VERSION does not exist. Continuing with build."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.18'  # Ensure we're using a compatible version

      - name: Build zip and push release
        id: create_artifact
        if: steps.check_release.outputs.exists != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd go/encrypt
          make kit
          cd emergency-kit
          VERSION="${{ steps.get_version.outputs.version }}"
          ARTIFACT_NAME="zc-${VERSION}.zip"
          zip -r "../../../${ARTIFACT_NAME}" ./*
          cd ../../..
          echo "Created ZIP archive: ${ARTIFACT_NAME}"

          # Create release notes
          cat > release_notes.md << EOF
          This is a pre-built emergency-kit based on zc, a self-contained tool for encrypting folders and files.
          For full instructions, see the README.md file included in the package.
          EOF
          
          ls -la

          # Create the release with GitHub CLI
          TAG_VERSION="v${VERSION}"
          gh release create "$TAG_VERSION" \
            --title "zc folder encryption kit $TAG_VERSION" \
            --notes-file release_notes.md \
            "${ARTIFACT_NAME}"
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
  
      - name: Attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: '${{ steps.create_artifact.outputs.artifact_name }}'
